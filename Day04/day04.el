;;;; Header(setq filename "input.txt")(require 'aoc-helpers (expand-file-name "../aoc-helpers.el"));;;; Task Functions(defun parse-bingo-data (&optional file)  (let* ((data (aoc-input file 'string "^\n"))         (nums (str2num (split-string (s-chomp (car data)) ",")))         (boards (cl-loop for line in (cdr data)                          collect (vconcat                                   (str2num                                    (cl-remove-if                                     #'string-empty-p                                     (split-string (s-replace "\n" " " line) " +")))))))    (cons nums boards)))(defun is-winner (board)  (or (and (vector-all-zero-p board '( 0  1  2  3  4))  "R1")      (and (vector-all-zero-p board '( 5  6  7  8  9))  "R2")      (and (vector-all-zero-p board '(10 11 12 13 14))  "R3")      (and (vector-all-zero-p board '(15 16 17 18 19))  "R4")      (and (vector-all-zero-p board '(20 21 22 23 24))  "R5")      (and (vector-all-zero-p board '( 0  5 10 15 20))  "C1")      (and (vector-all-zero-p board '( 1  6 11 16 21))  "C2")      (and (vector-all-zero-p board '( 2  7 12 17 22))  "C3")      (and (vector-all-zero-p board '( 3  8 13 18 23))  "C4")      (and (vector-all-zero-p board '( 4  9 14 19 24))  "C5")))(defun mark-one-board (num board)  (cl-loop for bnum across-ref board           when (= bnum num)           return (setf bnum 0)))(defun mark-all-boards (num boards)  (cl-loop for board in-ref boards           with result = nil           do           (setq prev-winner (is-winner board))           (mark-one-board num board)           when (and (is-winner board) (not prev-winner))           do (setq result board)           finally return result))(defun board-state (board)  (concat (cl-loop for b across board                   concat (if (zerop b)                              "XX "                            (format "%02d " b)))          (if-let ((how-won (is-winner board)))              (format "(%s)" how-won)            " ")))(defun print-all-boards (i num boards)  (concat (format "After round %d: %s\n" i num)          (cl-loop for board being elements of boards using (index n)                   concat (format "%3d: %s\n" (1+ n) (board-state board)))          (format "Remaining boards: %S\n"                  (cl-loop for board being elements of boards using (index n)                           unless (is-winner board)                           collect (1+ n)))))(defun find-winner (data &optional part2 iter debug)  (let ((nums (car data))        (boards (cdr data)))    (cl-loop for num in nums             for n from 1 to (or iter (length nums))             do (setq result (mark-all-boards num boards))             when debug do (message (print-all-boards n num boards))             when (and result (or (not part2) (seq-every-p #'is-winner boards)))             return (progn (unless debug                             (sbr-print debug (print-all-boards n num boards)))                           (list num result)))))(defun calc-winner (debug lastnum board)  (sbr-print debug "Winner %d: %s" lastnum (board-state board))  (let ((product (seq-sum board)))    (list lastnum product (* lastnum product))))             (defun day04 (&optional part2 iter debug)  (let* ((data (parse-bingo-data))         (winner (find-winner data part2 iter debug)))    (if winner        (apply #'calc-winner debug winner)      (message "No winner after %S moves" iter))));; (day04) ;; After round 20: 60;;   1: 42 XX 77 49 67 64 XX XX 94 78 XX 62 45 11 43 XX 92 81 66 88 12 XX XX 24 XX  ;;   2: XX 40 25 11 89 84 33 10 XX 16 22 90 54 42 86 73 XX 70 XX 56 18 78 41 81 50  ;;   3: 58 XX 24 03 40 38 61 XX 39 36 45 XX 02 90 57 42 41 22 83 67 73 77 XX XX 85  ;;   4: 02 11 17 28 22 93 01 27 85 XX 37 72 54 94 86 25 40 57 XX XX 38 XX 83 30 92  ;;   5: 14 88 34 10 87 31 XX XX 72 28 26 01 50 81 76 98 02 17 XX 39 80 99 84 62 XX  ;;   6: 22 80 28 31 27 XX 92 XX 64 65 73 85 35 66 76 11 29 75 81 37 90 69 53 97 67  ;;   7: 84 89 93 01 37 99 XX 17 52 81 31 XX 28 12 XX 92 20 41 36 35 40 26 23 XX 64  ;;   8: 72 50 20 87 XX 28 88 15 09 24 XX 54 03 84 76 14 34 33 65 78 53 XX 23 XX 77  ;;   9: 76 17 07 38 25 72 XX XX 83 02 94 86 56 43 97 26 93 XX XX XX 03 85 29 XX 04  ;;  10: 58 XX 50 XX XX 85 33 76 97 62 39 70 42 25 XX 53 79 87 41 XX 45 27 03 92 88  ;;  11: 09 38 XX 18 56 40 XX 62 70 41 01 30 39 90 79 69 84 XX XX 35 65 54 XX 27 73  ;;  12: 92 85 69 XX 29 XX XX 01 26 XX 63 87 37 XX 62 XX 15 56 45 XX 86 67 39 34 89  ;;  13: 89 30 39 15 03 XX 37 38 56 77 67 XX 41 85 36 XX 07 12 97 87 50 42 XX 33 23  ;;  14: 11 40 38 XX 06 88 39 64 33 86 XX 79 63 12 03 XX 07 69 41 80 10 28 XX 37 89  ;;  15: 90 14 52 49 93 62 02 35 XX 42 87 03 85 29 68 15 XX 72 10 XX 50 80 XX 20 XX  ;;  16: 58 92 XX XX XX 02 17 54 93 XX 39 XX 76 XX 10 26 XX 52 11 65 23 36 78 77 43  ;;  17: 79 XX 10 41 97 80 45 81 XX 87 18 78 XX 92 XX 14 49 94 XX 37 06 62 76 57 35  ;;  18: 52 XX 03 78 89 06 49 90 54 15 XX 30 64 07 85 XX 50 73 XX XX 17 26 18 98 94  ;;  19: XX 86 XX XX 34 77 81 XX XX 53 99 93 29 28 85 76 49 XX 01 04 90 65 88 16 98  ;;  20: 89 XX 50 77 XX 35 34 66 XX 27 52 24 57 42 37 31 01 70 XX 62 33 XX 61 07 30  ;;  21: XX 10 86 85 XX 02 XX 68 40 24 XX 49 06 XX 99 93 36 31 52 67 84 81 XX 14 01  ;;  22: 84 92 66 24 XX 70 26 67 25 XX 52 11 XX 76 78 XX 33 83 93 37 XX 68 15 94 10  ;;  23: XX 45 58 25 27 15 93 10 76 86 XX 90 87 99 72 04 XX 31 03 37 52 35 83 54 33  ;;  24: 73 39 XX 89 84 XX 70 XX 61 18 16 92 78 26 XX 94 37 14 53 27 XX 30 68 77 63  ;;  25: 94 24 54 01 49 27 90 84 79 69 06 70 25 36 80 14 16 53 92 XX 61 33 XX 89 23  ;;  26: 85 92 37 64 XX 70 67 XX XX 27 69 62 45 XX 57 30 75 99 18 43 XX 07 10 XX 38  ;;  27: 78 XX XX XX 58 67 66 39 77 62 50 53 XX XX 70 23 42 38 22 XX 30 29 10 40 84  ;;  28: 27 89 XX 75 73 84 XX 07 12 XX 34 15 81 98 65 24 83 87 04 86 09 XX XX XX 36  ;;  29: 30 70 XX XX XX XX 11 49 37 XX 68 XX 41 63 85 93 35 07 XX 80 45 31 53 XX 26  ;;  30: 98 75 XX 09 18 XX 97 26 73 64 62 99 XX 43 XX XX 37 10 XX 94 35 68 22 76 83  ;;  31: 35 09 XX XX 40 30 10 99 07 XX 12 77 54 25 34 73 97 38 11 17 70 41 87 29 57  ;;  32: XX 50 69 58 93 89 52 23 24 XX 20 53 43 22 84 XX 04 XX 64 06 92 XX 10 26 85  ;;  33: 37 XX 98 80 77 15 76 12 75 52 94 41 40 69 63 92 28 XX 14 17 03 62 86 XX XX  ;;  34: 40 01 33 53 64 XX 09 76 50 XX XX 34 XX 98 12 06 84 72 86 15 18 80 XX XX 23  ;;  35: 40 86 XX 61 34 XX XX 39 88 XX 36 XX XX XX 97 83 87 63 94 26 53 30 23 14 45  ;;  36: 93 20 29 09 66 25 72 10 54 30 31 XX 41 15 XX XX 61 XX XX 81 03 50 36 94 27  ;;  37: XX 23 14 30 10 XX 36 58 40 92 XX 84 33 XX XX 86 20 XX 57 XX 87 11 XX XX 31  ;;  38: XX XX 73 41 10 31 15 70 56 39 83 11 37 38 42 XX 58 53 77 14 79 XX XX 29 93  ;;  39: XX XX 62 XX 87 92 90 XX 15 57 38 68 26 78 36 31 84 97 81 XX 12 XX 35 70 93  ;;  40: XX 52 XX 80 87 XX 77 XX 35 61 37 41 14 73 XX 62 90 54 XX 88 67 20 56 22 85  ;;  41: XX 56 68 49 XX 34 18 65 XX XX 52 94 87 90 XX 36 30 45 03 77 84 89 64 20 41  ;;  42: 17 06 XX 27 64 14 34 XX XX 40 XX 97 XX 57 88 XX 79 XX 31 02 15 99 XX 62 50 (C3);;  43: 86 16 33 27 39 03 34 42 15 XX 84 02 85 31 87 97 41 49 XX 23 XX 06 XX XX 10  ;;  44: XX 25 17 28 XX XX 07 29 XX 81 97 03 26 64 11 98 75 45 89 XX 49 70 84 41 57  ;;  45: XX XX 65 35 27 89 17 18 66 37 16 68 56 87 33 XX 86 52 XX 23 XX 10 53 07 XX  ;;  46: 76 88 50 XX 83 23 63 XX 26 41 84 XX 36 80 68 37 79 XX XX 01 XX XX 58 99 65  ;;  47: XX XX 12 XX 09 31 26 67 XX 98 54 XX 56 03 80 10 57 17 37 92 78 87 28 XX 52  ;;  48: 49 85 57 58 30 77 76 92 97 03 69 66 14 25 83 63 98 XX 37 78 22 XX 89 XX XX  ;;  49: XX 24 38 66 88 XX 18 XX 26 23 41 36 14 XX XX 56 XX 99 83 58 28 27 78 03 43  ;;  50: XX 65 XX XX 11 10 41 09 39 62 75 85 12 61 66 35 43 64 94 XX XX 28 01 92 02  ;;  51: XX 81 XX 33 15 XX XX XX XX 07 34 90 64 50 97 23 43 XX 03 26 16 22 67 58 09  ;;  52: 83 33 88 16 XX XX 98 43 24 34 45 09 27 02 76 04 57 80 77 87 61 11 66 81 50  ;;  53: 17 62 88 23 XX 57 25 84 XX 65 XX 85 39 90 99 83 79 37 34 XX 29 54 92 12 XX  ;;  54: 28 XX 78 XX XX 12 77 XX 81 23 XX 54 17 16 45 42 89 62 63 XX 26 98 31 85 07  ;;  55: 86 XX 02 39 XX 67 73 62 69 38 06 94 25 66 07 26 41 81 XX 79 XX XX 33 XX 10  ;;  56: 24 22 XX XX 62 XX XX 83 17 64 66 23 04 78 36 54 80 38 20 14 XX 85 XX 39 12  ;;  57: 72 56 75 34 XX 20 22 90 87 97 24 XX 61 XX XX XX 38 07 18 XX 73 57 89 80 92  ;;  58: 42 23 22 XX 37 72 77 88 63 07 XX 80 62 10 69 XX 01 XX 70 25 67 97 75 45 XX  ;;  59: 03 45 XX 04 XX 14 06 34 49 XX 31 98 35 23 85 10 XX 16 40 15 11 99 07 XX 28  ;;  60: 42 XX 52 27 25 31 28 11 86 81 35 80 20 65 24 17 XX 93 49 58 16 92 78 63 61  ;;  61: 57 XX 34 XX XX 78 25 79 42 36 65 84 XX XX XX 33 XX 09 XX 90 53 69 54 XX 76  ;;  62: 67 29 07 XX 73 87 49 XX 10 14 40 98 89 41 12 58 20 27 XX 53 XX 78 XX XX 80  ;;  63: 75 XX 73 XX 04 XX 67 28 78 XX 29 62 65 XX XX XX XX XX 81 50 80 38 XX XX XX  ;;  64: 45 41 80 64 XX 14 93 40 76 70 15 77 49 XX 98 XX 68 16 18 92 81 83 XX 36 XX  ;;  65: 56 03 88 97 72 XX XX 98 11 XX 52 XX 54 89 09 67 41 78 17 XX 99 02 06 07 77  ;;  66: 66 20 XX 64 09 XX 52 XX 56 XX 42 81 29 93 06 72 75 83 15 76 99 23 14 XX 50  ;;  67: 77 90 79 49 03 XX 76 02 41 XX 86 XX 36 84 16 85 XX XX 18 XX 73 33 XX 45 58  ;;  68: XX 72 86 18 84 XX XX 06 22 07 31 XX 90 XX 58 65 XX 04 67 92 17 XX XX 35 26  ;;  69: 14 81 XX XX 29 XX 64 99 41 43 XX 72 53 33 10 XX 38 76 68 56 57 88 39 XX XX  ;;  70: 15 XX 02 78 09 XX 36 41 29 97 86 18 57 69 49 79 37 XX 88 XX XX 23 87 01 30  ;;  71: 39 45 56 XX 89 02 42 66 03 70 75 80 17 64 97 XX 35 XX 23 88 18 XX 99 07 38  ;;  72: 30 54 83 88 XX 52 15 XX 77 86 02 79 12 16 50 40 14 97 63 35 33 XX 25 XX 94  ;;  73: 37 85 35 10 22 52 31 77 XX XX XX 03 49 XX 20 24 75 XX 89 97 78 63 14 XX 42  ;;  74: XX 26 28 38 31 XX XX XX XX 10 68 25 45 57 56 36 14 69 30 15 81 03 37 XX 40  ;;  75: 75 30 XX 28 XX XX 79 XX XX 09 81 50 66 92 61 29 02 88 15 99 87 XX 26 07 XX  ;;  76: XX 75 81 72 89 XX XX 94 03 97 93 XX 37 XX 56 63 XX 29 XX XX 41 04 31 49 33  ;;  77: XX XX 57 29 63 85 36 58 89 33 XX 75 67 23 39 49 XX XX 10 84 15 07 XX 56 12  ;;  78: 01 XX 65 67 04 31 XX 34 30 37 93 66 18 79 XX 28 06 XX XX 42 XX 98 87 89 81  ;;  79: 79 30 10 XX 69 56 XX 27 90 72 77 57 93 92 97 15 45 04 18 68 XX 02 29 26 83  ;;  80: XX 41 53 30 31 85 18 17 52 39 49 38 04 57 54 63 XX XX 16 XX 66 62 27 10 37  ;;  81: 28 94 XX 97 XX XX 17 72 84 80 XX 06 XX 77 98 50 70 XX 85 XX 92 61 43 16 93  ;;  82: 10 XX 27 84 63 69 97 09 83 89 06 XX 42 87 77 20 94 34 04 64 XX 12 38 39 18  ;;  83: 04 54 XX 76 64 39 15 80 42 09 57 56 87 61 28 70 85 36 25 75 38 53 12 XX XX  ;;  84: 83 97 XX 29 XX XX 30 31 92 61 01 42 17 94 67 20 39 36 XX 10 18 69 XX 43 76  ;;  85: 63 XX 68 XX 92 85 94 XX 41 35 39 XX 62 67 87 70 XX 40 84 XX 52 30 53 22 01  ;;  86: 17 39 XX 50 XX 72 07 88 04 68 94 XX 45 15 77 XX 53 62 XX 67 69 12 70 XX 35  ;;  87: 56 89 XX XX 14 23 77 62 04 22 88 87 27 XX 94 06 28 40 11 83 33 86 99 80 63  ;;  88: 02 XX 16 33 81 18 09 45 39 49 03 XX XX 27 58 XX 31 28 42 77 37 83 61 25 XX  ;;  89: XX 01 06 34 23 56 40 66 50 99 XX 28 65 XX 27 XX 67 22 17 XX 29 43 XX XX XX  ;;  90: 90 86 69 22 XX 72 XX 29 62 XX 40 01 54 87 XX 41 78 28 43 33 77 49 XX XX 61  ;;  91: XX XX 39 68 XX 97 XX 22 07 92 XX 88 84 16 30 86 54 XX 50 87 72 24 41 25 XX  ;;  92: 09 35 43 49 77 24 29 01 70 80 15 04 93 XX 06 31 17 XX 99 XX 28 XX 56 41 97  ;;  93: 24 75 16 XX 98 86 XX 07 93 10 42 XX 06 XX XX 43 69 78 94 33 03 45 73 11 20  ;;  94: XX 03 17 58 89 11 54 53 34 14 66 XX XX XX 41 01 22 62 69 25 65 98 76 84 XX  ;;  95: 37 93 XX 15 20 43 XX XX 53 75 18 90 25 69 92 54 42 83 41 17 XX 14 22 70 04  ;;  96: 78 72 XX 86 89 64 61 69 79 85 10 XX 37 18 XX XX 22 31 81 07 40 57 53 66 XX  ;;  97: XX 77 33 81 90 27 02 94 24 XX 79 28 30 97 XX XX 18 10 01 38 58 12 XX 87 17  ;;  98: 68 76 04 63 16 75 66 XX 50 14 73 24 22 06 33 99 61 87 01 XX 35 83 XX 39 20  ;;  99: 42 39 28 87 37 89 12 75 XX 84 17 XX 49 03 XX 56 76 66 92 85 27 18 86 XX 58  ;; 100: XX 83 XX 29 63 XX 38 62 03 67 56 72 40 XX 64 XX 89 XX 04 XX 07 92 80 69 61  ;; Remaining boards: (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100);; Winner 60: 17 06 XX 27 64 14 34 XX XX 40 XX 97 XX 57 88 XX 79 XX 31 02 15 99 XX 62 50 (C3);;  ===> (60 782 46920);; (day04 t) ;; After round 84: 35;;   1: XX XX XX XX 67 64 XX XX XX XX XX XX XX 11 XX XX XX XX XX XX XX XX XX XX XX (R4);;   2: XX 40 XX 11 XX XX XX 10 XX XX XX XX XX XX XX 73 XX XX XX XX 18 XX 41 XX XX (R3);;   3: 58 XX XX XX 40 XX XX XX XX XX XX XX 02 XX XX XX 41 XX XX 67 73 XX XX XX XX (R2);;   4: 02 11 XX XX XX XX XX XX XX XX XX XX XX XX XX XX 40 XX XX XX XX XX XX XX XX (R2);;   5: XX XX XX 10 87 31 XX XX XX XX XX XX XX XX XX XX 02 XX XX XX XX 99 XX XX XX (R3);;   6: XX XX XX 31 XX XX XX XX 64 65 73 XX XX XX XX 11 XX XX XX XX XX XX XX 97 67 (C2);;   7: XX XX XX XX XX 99 XX XX XX XX 31 XX XX XX XX XX XX 41 XX XX 40 XX XX XX 64 (R1);;   8: XX XX XX 87 XX XX XX 15 XX XX XX XX XX XX XX XX XX XX 65 XX XX XX XX XX XX (R3);;   9: XX XX XX XX XX XX XX XX XX 02 XX XX XX XX 97 XX XX XX XX XX XX XX XX XX XX (R1);;  10: 58 XX XX XX XX XX XX XX 97 XX XX XX XX XX XX XX XX 87 41 XX XX XX XX XX XX (R3);;  11: XX XX XX 18 XX 40 XX XX XX 41 XX XX XX XX XX XX XX XX XX XX 65 XX XX XX 73 (R3);;  12: XX XX XX XX XX XX XX XX XX XX XX 87 XX XX XX XX 15 XX XX XX XX 67 XX XX XX (R1);;  13: XX XX XX 15 XX XX XX XX XX XX 67 XX 41 XX XX XX XX XX 97 87 XX XX XX XX XX (R2);;  14: 11 40 XX XX XX XX XX 64 XX XX XX XX XX XX XX XX XX XX 41 XX 10 XX XX XX XX (R3);;  15: XX XX XX XX XX XX 02 XX XX XX 87 XX XX XX XX 15 XX XX 10 XX XX XX XX XX XX (R1);;  16: 58 XX XX XX XX 02 XX XX XX XX XX XX XX XX 10 XX XX XX 11 65 XX XX XX XX XX (R5);;  17: XX XX 10 41 97 XX XX XX XX 87 18 XX XX XX XX XX XX XX XX XX XX XX XX XX XX (R4);;  18: XX XX XX XX XX XX XX XX XX 15 XX XX 64 XX XX XX XX 73 XX XX XX XX 18 XX XX (R1);;  19: XX XX XX XX XX XX XX XX XX XX 99 XX XX XX XX XX XX XX XX XX XX 65 XX XX XX (R1);;  20: XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX 31 XX XX XX XX XX XX XX XX XX (R1);;  21: XX 10 XX XX XX 02 XX XX 40 XX XX XX XX XX 99 XX XX 31 XX 67 XX XX XX XX XX (R5);;  22: XX XX XX XX XX XX XX 67 XX XX XX 11 XX XX XX XX XX XX XX XX XX XX 15 XX 10 (R1);;  23: XX XX 58 XX XX 15 XX 10 XX XX XX XX 87 99 XX XX XX 31 XX XX XX XX XX XX XX (R5);;  24: 73 XX XX XX XX XX XX XX XX 18 XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX (R3);;  25: XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX (R1);;  26: XX XX XX 64 XX XX 67 XX XX XX XX XX XX XX XX XX XX 99 18 XX XX XX 10 XX XX (R3);;  27: XX XX XX XX 58 67 XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX 10 40 XX (R3);;  28: XX XX XX XX 73 XX XX XX XX XX XX 15 XX XX 65 XX XX 87 XX XX XX XX XX XX XX (R2);;  29: XX XX XX XX XX XX 11 XX XX XX XX XX 41 XX XX XX XX XX XX XX XX 31 XX XX XX (R1);;  30: XX XX XX XX 18 XX 97 XX 73 64 XX 99 XX XX XX XX XX 10 XX XX XX XX XX XX XX (R5);;  31: XX XX XX XX 40 XX 10 99 XX XX XX XX XX XX XX 73 97 XX 11 XX XX 41 87 XX XX (R3);;  32: XX XX XX 58 XX XX XX XX XX XX XX XX XX XX XX XX XX XX 64 XX XX XX 10 XX XX (R2);;  33: XX XX XX XX XX 15 XX XX XX XX XX 41 40 XX XX XX XX XX XX XX XX XX XX XX XX (R1);;  34: 40 XX XX XX 64 XX XX XX XX XX XX XX XX XX XX XX XX XX XX 15 18 XX XX XX XX (R2);;  35: 40 XX XX XX XX XX XX XX XX XX XX XX XX XX 97 XX 87 XX XX XX XX XX XX XX XX (R2);;  36: XX XX XX XX XX XX XX 10 XX XX 31 XX 41 15 XX XX XX XX XX XX XX XX XX XX XX (R1);;  37: XX XX XX XX 10 XX XX 58 40 XX XX XX XX XX XX XX XX XX XX XX 87 11 XX XX 31 (R3);;  38: XX XX 73 41 10 31 15 XX XX XX XX 11 XX XX XX XX 58 XX XX XX XX XX XX XX XX (R5);;  39: XX XX XX XX 87 XX XX XX 15 XX XX XX XX XX XX 31 XX 97 XX XX XX XX XX XX XX (R3);;  40: XX XX XX XX 87 XX XX XX XX XX XX 41 XX 73 XX XX XX XX XX XX 67 XX XX XX XX (R2);;  41: XX XX XX XX XX XX 18 65 XX XX XX XX 87 XX XX XX XX XX XX XX XX XX 64 XX 41 (R1);;  42: XX XX XX XX 64 XX XX XX XX 40 XX 97 XX XX XX XX XX XX 31 02 15 99 XX XX XX (C3);;  43: XX XX XX XX XX XX XX XX 15 XX XX 02 XX 31 87 97 41 XX XX XX XX XX XX XX 10 (R1);;  44: XX XX XX XX XX XX XX XX XX XX 97 XX XX 64 11 XX XX XX XX XX XX XX XX 41 XX (R1);;  45: XX XX 65 XX XX XX XX 18 XX XX XX XX XX 87 XX XX XX XX XX XX XX 10 XX XX XX (R4);;  46: XX XX XX XX XX XX XX XX XX 41 XX XX XX XX XX XX XX XX XX XX XX XX 58 99 65 (R1);;  47: XX XX XX XX XX 31 XX 67 XX XX XX XX XX XX XX 10 XX XX XX XX XX 87 XX XX XX (R1);;  48: XX XX XX 58 XX XX XX XX 97 XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX (R3);;  49: XX XX XX XX XX XX 18 XX XX XX 41 XX XX XX XX XX XX 99 XX 58 XX XX XX XX XX (R1);;  50: XX 65 XX XX 11 10 41 XX XX XX XX XX XX XX XX XX XX 64 XX XX XX XX XX XX 02 (R3);;  51: XX XX XX XX 15 XX XX XX XX XX XX XX 64 XX 97 XX XX XX XX XX XX XX 67 58 XX (R2);;  52: XX XX XX XX XX XX XX XX XX XX XX XX XX 02 XX XX XX XX XX 87 XX 11 XX XX XX (R1);;  53: XX XX XX XX XX XX XX XX XX 65 XX XX XX XX 99 XX XX XX XX XX XX XX XX XX XX (R1);;  54: XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX 31 XX XX (R1);;  55: XX XX 02 XX XX 67 73 XX XX XX XX XX XX XX XX XX 41 XX XX XX XX XX XX XX 10 (R3);;  56: XX XX XX XX XX XX XX XX XX 64 XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX (R1);;  57: XX XX XX XX XX XX XX XX 87 97 XX XX XX XX XX XX XX XX 18 XX 73 XX XX XX XX (R1);;  58: XX XX XX XX XX XX XX XX XX XX XX XX XX 10 XX XX XX XX XX XX 67 97 XX XX XX (R1);;  59: XX XX XX XX XX XX XX XX XX XX 31 XX XX XX XX 10 XX XX 40 15 11 99 XX XX XX (R1);;  60: XX XX XX XX XX 31 XX 11 XX XX XX XX XX 65 XX XX XX XX XX 58 XX XX XX XX XX (R1);;  61: XX XX XX XX XX XX XX XX XX XX 65 XX XX XX XX XX XX XX XX XX XX XX XX XX XX (R1);;  62: 67 XX XX XX 73 87 XX XX 10 XX 40 XX XX 41 XX 58 XX XX XX XX XX XX XX XX XX (R5);;  63: XX XX 73 XX XX XX 67 XX XX XX XX XX 65 XX XX XX XX XX XX XX XX XX XX XX XX (R4);;  64: XX 41 XX 64 XX XX XX 40 XX XX 15 XX XX XX XX XX XX XX 18 XX XX XX XX XX XX (R5);;  65: XX XX XX 97 XX XX XX XX 11 XX XX XX XX XX XX 67 41 XX XX XX 99 02 XX XX XX (R3);;  66: XX XX XX 64 XX XX XX XX XX XX XX XX XX XX XX XX XX XX 15 XX 99 XX XX XX XX (R2);;  67: XX XX XX XX XX XX XX 02 41 XX XX XX XX XX XX XX XX XX 18 XX 73 XX XX XX 58 (R1);;  68: XX XX XX 18 XX XX XX XX XX XX 31 XX XX XX 58 65 XX XX 67 XX XX XX XX XX XX (R2);;  69: XX XX XX XX XX XX 64 99 41 XX XX XX XX XX 10 XX XX XX XX XX XX XX XX XX XX (R1);;  70: 15 XX 02 XX XX XX XX 41 XX 97 XX 18 XX XX XX XX XX XX XX XX XX XX 87 XX XX (R4);;  71: XX XX XX XX XX 02 XX XX XX XX XX XX XX 64 97 XX XX XX XX XX 18 XX 99 XX XX (R1);;  72: XX XX XX XX XX XX 15 XX XX XX 02 XX XX XX XX 40 XX 97 XX XX XX XX XX XX XX (R1);;  73: XX XX XX 10 XX XX 31 XX XX XX XX XX XX XX XX XX XX XX XX 97 XX XX XX XX XX (R3);;  74: XX XX XX XX 31 XX XX XX XX 10 XX XX XX XX XX XX XX XX XX 15 XX XX XX XX 40 (R3);;  75: XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX 02 XX 15 99 87 XX XX XX XX (R1);;  76: XX XX XX XX XX XX XX XX XX 97 XX XX XX XX XX XX XX XX XX XX 41 XX 31 XX XX (R1);;  77: XX XX XX XX XX XX XX 58 XX XX XX XX 67 XX XX XX XX XX 10 XX 15 XX XX XX XX (R1);;  78: XX XX 65 67 XX 31 XX XX XX XX XX XX 18 XX XX XX XX XX XX XX XX XX 87 XX XX (R4);;  79: XX XX 10 XX XX XX XX XX XX XX XX XX XX XX 97 15 XX XX 18 XX XX 02 XX XX XX (R2);;  80: XX 41 XX XX 31 XX 18 XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX 10 XX (R3);;  81: XX XX XX 97 XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX (R2);;  82: 10 XX XX XX XX XX 97 XX XX XX XX XX XX 87 XX XX XX XX XX 64 XX XX XX XX 18 (C3);;  83: XX XX XX XX 64 XX 15 XX XX XX XX XX 87 XX XX XX XX XX XX XX XX XX XX XX XX (R4);;  84: XX 97 XX XX XX XX XX 31 XX XX XX XX XX XX 67 XX XX XX XX 10 18 XX XX XX XX (C4);;  85: XX XX XX XX XX XX XX XX 41 XX XX XX XX 67 87 XX XX 40 XX XX XX XX XX XX XX (R1);;  86: XX XX XX XX XX XX XX XX XX XX XX XX XX 15 XX XX XX XX XX 67 XX XX XX XX XX (R1);;  87: XX XX XX XX XX XX XX XX XX XX XX 87 XX XX XX XX XX 40 11 XX XX XX 99 XX XX (R1);;  88: 02 XX XX XX XX 18 XX XX XX XX XX XX XX XX 58 XX 31 XX XX XX XX XX XX XX XX (R5);;  89: XX XX XX XX XX XX 40 XX XX 99 XX XX 65 XX XX XX 67 XX XX XX XX XX XX XX XX (R1);;  90: XX XX XX XX XX XX XX XX XX XX 40 XX XX 87 XX 41 XX XX XX XX XX XX XX XX XX (R1);;  91: XX XX XX XX XX 97 XX XX XX XX XX XX XX XX XX XX XX XX XX 87 XX XX 41 XX XX (R1);;  92: XX XX XX XX XX XX XX XX XX XX 15 XX XX XX XX 31 XX XX 99 XX XX XX XX 41 97 (R1);;  93: XX XX XX XX XX XX XX XX XX 10 XX XX XX XX XX XX XX XX XX XX XX XX 73 11 XX (R1);;  94: XX XX XX 58 XX 11 XX XX XX XX XX XX XX XX 41 XX XX XX XX XX 65 XX XX XX XX (R4);;  95: XX XX XX 15 XX XX XX XX XX XX 18 XX XX XX XX XX XX XX 41 XX XX XX XX XX XX (R2);;  96: XX XX XX XX XX 64 XX XX XX XX 10 XX XX 18 XX XX XX 31 XX XX 40 XX XX XX XX (R1);;  97: XX XX XX XX XX XX 02 XX XX XX XX XX XX 97 XX XX 18 10 XX XX 58 XX XX 87 XX (R1);;  98: XX XX XX XX XX XX XX XX XX XX 73 XX XX XX XX 99 XX 87 XX XX XX XX XX XX XX (R1);;  99: XX XX XX 87 XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX 18 XX XX 58 (R2);; 100: XX XX XX XX XX XX XX XX XX 67 XX XX 40 XX 64 XX XX XX XX XX XX XX XX XX XX (R1);; Remaining boards: nil;; Winner 35: XX XX XX XX 18 XX 97 XX 73 64 XX 99 XX XX XX XX XX 10 XX XX XX XX XX XX XX (R5);;  ===> (35 361 12635);;;; Old versions(defun parse-bingo-data-old (&optional file)  (let* ((data (split-string (aoc-input file 'line) "^\n"))         (bingo-nums (split-string (s-chomp (car data)) ","))         (board-nums (cl-loop for line in (cdr data)                              collect (vconcat (cl-remove-if                                                #'string-empty-p                                                (split-string  (s-replace "\n" " " line) " +"))))))    (cons bingo-nums board-nums)))                  (defun mark-one-board-old (num board board-nums)  (cl-loop for bnum across board-nums           for mmark across-ref board           when (equal bnum num)           return (setf mmark t)))(defun mark-all-boards-old (num boards board-nums)  (cl-loop for board in-ref boards           for bnums in board-nums           with result = nil           do           (setq prev-winner (is-winner board))           (mark-one-board num board bnums)           when (and (is-winner board) (not prev-winner))           do (setq result (list board bnums))           finally return result))(defun board-state-old (board bnums &optional invert)  (concat (cl-loop for b across board                   for bnum across bnums                   concat (if (eq b (not invert))                              (format "%s%s " (if (= (length bnum) 1) " " "")  bnum)                            "-- "))          (if-let ((how-won (is-winner board)))              (format "(%s)" how-won)            " ")))                    (defun print-all-boards-old (i num boards board-nums)  (concat (format "After round %d: %s\n" i num)          (cl-loop for n from 1 to (length boards)                   for board in boards                   for bnums in board-nums                   concat (format "%d: %s\n" n (board-state board bnums)))                    (format "Remaining boards: %S\n"                  (cl-loop for board in boards                           for n from 1 to (length boards)                           unless (is-winner board)                           collect n))))                      (defun find-winner-old (bingo-nums board-nums &optional iter part2 debug)  (let* ((board-count (length board-nums))         (boards (cl-loop for i from 1 to board-count                          collect (make-vector 25 nil))))    (cl-loop for num in bingo-nums             for n from 1 to (or iter (length bingo-nums))             do             (setq result (mark-all-boards num boards board-nums))             (when debug               (message (print-all-boards n num boards board-nums)))             when (and result (or (not part2) (seq-every-p #'is-winner boards)))             return (progn (unless debug                             (sbr-print debug (print-all-boards n num boards board-nums)))                           (cons num result)))))(defun calc-winner-old (debug lastnumstr board bnums)  (sbr-print debug "Winner %s: %s" lastnumstr (board-state board bnums))  (sbr-print debug "Others %s: %s" lastnumstr (board-state board bnums t))  (let ((lastnum (string-to-number lastnumstr))        (product (cl-loop for b across board                          for bnum across bnums                          unless b                          sum (string-to-number bnum))))    (list lastnum product (* lastnum product))))